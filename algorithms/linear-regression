import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_regression

def linear_regression_no_l2(X, y, lr=0.01, epochs=1000):
    X = np.c_[np.ones(X.shape[0]), X]
    weights = np.zeros(X.shape[1])
    losses = []

    for _ in range(epochs):
        y_pred = X @ weights
        error = y_pred - y
        loss = np.mean(error ** 2)
        losses.append(loss)
        gradient = 2 * X.T @ error / len(y)
        weights -= lr * gradient

    return weights, losses

def linear_regression_with_l2(X, y, lr=0.01, epochs=1000, l2=0.1):
    X = np.c_[np.ones(X.shape[0]), X]
    weights = np.zeros(X.shape[1])
    losses = []

    for _ in range(epochs):
        y_pred = X @ weights
        error = y_pred - y
        loss = np.mean(error ** 2) + l2 * np.sum(weights[1:] ** 2)
        losses.append(loss)
        gradient = 2 * X.T @ error / len(y) + 2 * l2 * np.r_[0, weights[1:]]
        weights -= lr * gradient

    return weights, losses

def main():
    X, y = make_regression(n_samples=100, n_features=1, noise=15, random_state=42)

    weights_no_l2, losses_no_l2 = linear_regression_no_l2(X, y, lr=0.01, epochs=500)
    weights_l2, losses_l2 = linear_regression_with_l2(X, y, lr=0.01, epochs=500, l2=0.1)

    print("Weights without L2:", weights_no_l2)
    print("Weights with L2:", weights_l2)

    plt.plot(losses_no_l2, label="No L2")
    plt.plot(losses_l2, label="With L2")
    plt.title("Loss Over Epochs")
    plt.xlabel("Epoch")
    plt.ylabel("Loss")
    plt.legend()
    plt.grid(True)
    plt.show()

    plt.scatter(X, y, label="Data", alpha=0.6)
    X_bias = np.c_[np.ones(X.shape[0]), X]
    y_pred_no_l2 = X_bias @ weights_no_l2
    y_pred_l2 = X_bias @ weights_l2
    plt.plot(X, y_pred_no_l2, color='red', label="No L2")
    plt.plot(X, y_pred_l2, color='green', label="With L2")
    plt.title("Regression Line Comparison")
    plt.xlabel("X")
    plt.ylabel("y")
    plt.legend()
    plt.show()

if __name__ == "__main__":
    main()